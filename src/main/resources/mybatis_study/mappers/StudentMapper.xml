<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mybatis_study.mappers.StudentMapper">
	<sql id="selectSQL">
		select stud_id as studId, name, email, dob, phone from students
	</sql>
	<sql id="whereSQL">
		<where>
			<if test="studId != null">
				stud_id=#{studId}
			</if>
		</where>
	</sql>


	<select id="selectStudentByNo" parameterType="Student" resultType="Student">
		<!-- select stud_id as studId, name, email, dob, phone 
		from students
		where stud_id=#{studId} -->
		<include refid="selectSQL"></include>
		<include refid="whereSQL"></include>
	</select>
	
	<!-- id는 마음대로 -->
	<resultMap type="Student" id="stdResult">
	<!-- column: 테이블에 있는 컬럼 -->
	<!-- 여기서 mapping 시켰기 때문에 위 select 처럼 stdid에  as 를 안써도 됨 -->
		<id column="stud_id" property="studId"/>
	<!-- select 에서 f 를 mapping 시켜주는 부분 (phone : Student dto 클래스에서 정의해둔 phoneNumber 변수) -->
		<result column="f" property="phone.countryCode"/>
		<result column="m" property="phone.stateCode"/>
		<result column="l" property="phone.number"/>
	</resultMap>
	<select id="selectStudentByNoWithResultMap" parameterType="Student" resultMap="stdResult">
		select stud_id, name, email, dob, phone,
		substring(phone, 1, 3) as f,
		substring(phone, 5, 3) as m,
		substring(phone, 9, 4) as l 
		from students
		where stud_id=#{studId}
	</select>
	
	<select id="selectStudentByAll" resultType="Student">
		<!-- select STUD_ID as studID, NAME, EMAIL, PHONE, DOB from students -->
		<include refid="selectSQL"></include>
	</select>
	
	<!-- INSERT -->
	<insert id="insertStudent" parameterType="Student">
		insert into students(stud_id, name, email, phone, dob) values(#{studId}, #{name}, #{email}, #{phone}, #{dob})
	</insert>
	
	<!-- DELETE -->
	<delete id="deleteStudent" parameterType="int">
		delete from students where stud_id = #{studId}
	</delete>
	
	<!-- UPDATE -->
	<update id="updateStudent" parameterType="Student">
		update students set name=#{name}, email=#{email}, phone=#{phone}, dob=#{dob} where stud_id=#{studId}
	</update>
	
	<!-- RESULTMAPS -->
	<resultMap type="Student" id="StudentResult">
		<id property="studId" column="stud_id"/>
		<result property="name" column="name"/>
		<result property="email" column="email"/>
		<result property="phone" column="phone"/>
		<result property="dob" column="dob"/>
	</resultMap>
	<select id="selectStudentByAllForResultMap" resultMap="StudentResult">
		<include refid="selectSQL"></include>
	</select>
	
	<!-- HASHMAPS -->
	<select id="selectStudentByAllForHashMap" resultType="map">
		<include refid="selectSQL"></include>
	</select>
	
	<!-- 일대일 매핑 (Address/Association) -->
	<resultMap type="Student" id="StudentAssociation" extends="StudentResult">
		<association property="address" resultMap="mybatis_study.mappers.AddressMapper.AddressResult"></association>
	</resultMap>
	
	<select id="selectStudentByNoAssociation" parameterType="Student" resultMap="StudentAssociation">
		select stud_id, name, email, phone, dob, a.addr_id, street, city, state, zip, country 
		from students s join addresses a on s.addr_id=a.addr_id
		where stud_id = #{studId}
	</select>
	
	<!-- enum 타입 다루기 -->
	<insert id="insertEnumStudent" parameterType="Student">
		insert into students(stud_id, name , email , phone , dob, gender ) values(#{studId}, #{name}, #{email}, #{phone}, #{dob}, #{gender})
	</insert>
	
	<!-- 여러 개의 입력 파라미터 전달  -->
	<resultMap type="Student" id="StudentGenderResult" extends="StudentResult">
		<result property="gender" column="gender"/>
	</resultMap>
	
	<select id="selectAllStudentByMap" parameterType="map" resultMap="StudentGenderResult">
		select stud_id, name, email, phone, dob, gender from students
		<where>
			<if test="name != null">
				name = #{name}
			</if>
			<if test="email != null">
				AND email = #{email}
			</if>
		</where>
	</select>

	
	<!-- ResultSet 처리방식의 재정의 -->
	<select id="selectStudentForMap" parameterType="int" resultMap="StudentGenderResult">
		select stud_id, name from students where stud_id = #{studId}
	</select>

	<!-- p.189 Set 조건  -->
	<update id="updateSetStudent" parameterType="Student" >
		update students
		<set>
			<if test="name != null">
				name=#{name},
			</if>
			<if test="email != null">
				email=#{email},
			</if>
			<if test="phone != null">
				phone=#{phone},
			</if>
			<if test="dob != null">
				dob=#{dob},
			</if>
		</set>
		where stud_id=#{studId}
	</update>
	
</mapper>

